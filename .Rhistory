install.packages("devtools")
library("devtools")
devtools::install_github("Groupe-ElementR/cartography")
library("devtools")
install.packages("devtools")
install.package("libssl-dev")
instal.package("libssl-dev")
install.packages("libssl-dev")
install.packages("rgeos")
devtools::install_github("Groupe-ElementR/cartography")
library("devtools")
install.packages(devtools)
install.packages("devtools")
install.packages("devtools",)
install.packages("devtools",dependencies = TRUE)
install.packages("devtools",dependencies = TRUE)
install.packages("xml2",dependencies = TRUE)
library("devtools")
install.packages("revtools")
install.packages("devtools")
getRversion()
install.packages("rgeos")
install.packages("rgdal")
install.packages("rgdal")
install.packages("rgeosl")
install.packages("rgeos")
library("rgeos")
devtools::install_github("Groupe-ElementR/cartography")
devtools::install_github("Groupe-ElementR/SpatialPosition")
devtools::install_github("Groupe-ElementR/MTA")
spdftorec <- function(spdf){
for (n in 1:length(spdf)) {
poly.spdf <- spdf[n,]
# simplification du/des polygones
spoly.spdf <- gConvexHull(poly.spdf, byid=FALSE, id = NULL)
# Determination de l'axe de rotatin
df <- data.frame(id=row.names(poly.spdf)[1], x=spoly.spdf@polygons[[1]]@Polygons[[1]]@coords[,1], y=spoly.spdf@polygons[[1]]@Polygons[[1]]@coords[,2])
df$id <- row.names(df)
spatPts <- SpatialPointsDataFrame(coords=df[2:3], data=df)
proj4string(spatPts) <- proj4string(poly.spdf)
x <- 0
nb <- length(spatPts)
for (i in 1:nb){
for (j in 1:nb){
d <- gDistance(spatPts[i,],spatPts[j,])
if (d > x){
x <- d
id1 <- i
id2 <- j
}
}
}
wkt <- paste("GEOMETRYCOLLECTION(", paste("LINESTRING(", df[id1,]$x, " ", df[id1,]$y, ",", df[id2,]$x, " ",  df[id2,]$y, sep = "", collapse = "),"), "))", sep = "")
sl1 <- rgeos::readWKT(wkt)
centroid <- gCentroid(sl1)
# rotation et création de l'enveloppe
rad2deg <- function(rad) {(rad * 180) / (pi)}
angle <- rad2deg(atan(( df[id2,]$y - df[id1,]$y)/(df[id2,]$x - df[id1,]$x)))
tmp <- elide(spoly.spdf, rotate=angle, center=centroid@coords)
r.spdf <- elide(gEnvelope(tmp, byid=FALSE, id = NULL), rotate=(-angle), center=centroid@coords)
# data building
plot(r.spdf,border="red",lwd=2)
plot(poly.spdf ,add=T)
if (n==1){rect.spdf <- r.spdf}
if (n>1){rect.spdf <- rbind(rect.spdf,r.spdf,makeUniqueIDs = TRUE)}
}
return(rect.spdf)
}
library("maptools")
install.packages("maptools")
library("maptools")
library("rgeos")
library("maptools")
library("cartography")
spdftorec <- function(spdf){
for (n in 1:length(spdf)) {
poly.spdf <- spdf[n,]
# simplification du/des polygones
spoly.spdf <- gConvexHull(poly.spdf, byid=FALSE, id = NULL)
# Determination de l'axe de rotatin
df <- data.frame(id=row.names(poly.spdf)[1], x=spoly.spdf@polygons[[1]]@Polygons[[1]]@coords[,1], y=spoly.spdf@polygons[[1]]@Polygons[[1]]@coords[,2])
df$id <- row.names(df)
spatPts <- SpatialPointsDataFrame(coords=df[2:3], data=df)
proj4string(spatPts) <- proj4string(poly.spdf)
x <- 0
nb <- length(spatPts)
for (i in 1:nb){
for (j in 1:nb){
d <- gDistance(spatPts[i,],spatPts[j,])
if (d > x){
x <- d
id1 <- i
id2 <- j
}
}
}
wkt <- paste("GEOMETRYCOLLECTION(", paste("LINESTRING(", df[id1,]$x, " ", df[id1,]$y, ",", df[id2,]$x, " ",  df[id2,]$y, sep = "", collapse = "),"), "))", sep = "")
sl1 <- rgeos::readWKT(wkt)
centroid <- gCentroid(sl1)
# rotation et création de l'enveloppe
rad2deg <- function(rad) {(rad * 180) / (pi)}
angle <- rad2deg(atan(( df[id2,]$y - df[id1,]$y)/(df[id2,]$x - df[id1,]$x)))
tmp <- elide(spoly.spdf, rotate=angle, center=centroid@coords)
r.spdf <- elide(gEnvelope(tmp, byid=FALSE, id = NULL), rotate=(-angle), center=centroid@coords)
# data building
plot(r.spdf,border="red",lwd=2)
plot(poly.spdf ,add=T)
if (n==1){rect.spdf <- r.spdf}
if (n>1){rect.spdf <- rbind(rect.spdf,r.spdf,makeUniqueIDs = TRUE)}
}
return(rect.spdf)
}
rectangles <- spdftorec(nuts0.spdf)
plot(rectangles,lwd=2,border="red")
plot(nuts0.spdf,add=T)
library("cartography")
library("rgdal")
geom <- readOGR(dsn = "shp/wgs84/nuts2013", layer = "nuts3-geo-2013", verbose = TRUE)
library("rgdal")
geom <- readOGR(dsn = "shp/wgs84/nuts2013", layer = "nuts3-geo-2013", verbose = TRUE)
setwd("/home/nlambert/Documents/R/nuts")
geom <- readOGR(dsn = "shp/wgs84/nuts2013", layer = "nuts3-geo-2013", verbose = TRUE)
plot(geom)
proj4string(nuts3)
# QU'EST CE QUE R ?
# R est un langage de programmation dédié à l’analyse statistique.
# Libre et gratuit, disponible sur toutes les plateformes (Mac OS, Windows, Linux),
# QU'EST CE QUE R Studio ?
# Rstudio est un environnement de travail permettant d’écrire du code R
# Connaitre le répertoire de travail
getwd()
# changer le répertoire de travail
# setwd(dir = "/mon_chemin/")
# import d'un jeu de données, le format texte délimité (type csv) est fortement conseillé.
datanuts <- read.csv("data/datanuts.csv")
class(datanuts)
# Aperçu des données
View(datanuts)
head(datanuts)
# Calcul de quelques statistiques sur les variables
summary(datanuts)
# Affichage d'un graphique simple
hist(datanuts$gdppps2008)
plot(datanuts[,c("gdppps2008", "pop2008")])
title("GDP  - POP")
# chargement du package rgdal
library("rgdal")
# import d'un shapefile dans le dossier data
nuts3 <- readOGR(dsn = "data", layer = "nuts", verbose = TRUE)
class(nuts3)
# affichage du fond de carte
plot(nuts3)
# affichage plus personnalisé
plot(nuts3, col = "#DAE3E6", border = "#8A0641", lwd = 0.3)
# Aperçu des données attributaires du fond de carte
View(nuts3@data)
# information sur la projection
proj4string(nuts3)
setwd(dir = "/home/nlambert/Documents/PRENTATIONS/R-cartography-polimage")
# import d'un jeu de données, le format texte délimité (type csv) est fortement conseillé.
datanuts <- read.csv("data/datanuts.csv")
class(datanuts)
# Aperçu des données
View(datanuts)
head(datanuts)
# Calcul de quelques statistiques sur les variables
summary(datanuts)
# Affichage d'un graphique simple
hist(datanuts$gdppps2008)
plot(datanuts[,c("gdppps2008", "pop2008")])
title("GDP  - POP")
# chargement du package rgdal
library("rgdal")
# import d'un shapefile dans le dossier data
nuts3 <- readOGR(dsn = "data", layer = "nuts", verbose = TRUE)
class(nuts3)
# affichage du fond de carte
plot(nuts3)
# affichage plus personnalisé
plot(nuts3, col = "#DAE3E6", border = "#8A0641", lwd = 0.3)
# Aperçu des données attributaires du fond de carte
View(nuts3@data)
# information sur la projection
proj4string(nuts3)
proj <- +proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs"
proj <- "+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs"
proj <- "+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs"
geo.spdf <- readOGR(dsn = "shp/wgs84/nuts2013", layer = "nuts3-geo-2013", verbose = TRUE)
library("rgdal")
setwd("/home/nlambert/Documents/R/nuts")
geo.spdf <- readOGR(dsn = "shp/wgs84/nuts2013", layer = "nuts3-geo-2013", verbose = TRUE)
carto.spdf <- spTransform(x = geo.spdf, CRSobj = "+init=epsg:3035")
plot(carto.spdf)
guyane.spdf <- geo.spdf[geo.spdf@data=="FRA30",]
guyane.spdf <- geo.spdf[geo.spdf@data=="FRA30"]
guyane.spdf <- geo.spdf[,geo.spdf@data=="FRA30"]
guyane.spdf <- geo.spdf[geo.spdf@data$id=="FRA30",]
plot(guyane.spdf)
plot(carto.spdf)
plot(guyane.spdf, add=T)
plot(guyane.spdf)
guyane.spdf <- spTransform(x = guyane.spdf, CRSobj = "+init=epsg:3313")
plot(guyane.spdf)
plot(guyane.spdf)
guyane.spdf <- spTransform(x = guyane.spdf, CRSobj = "+init=epsg:3035")
plot(guyane.spdf)
guyane.spdf <- spTransform(x = guyane.spdf, CRSobj = "+init=epsg:3313")
plot(guyane.spdf)
plot(carto.spdf)
plot(guyane.spdf,add=T)
